inputs:
  azure_vm_blueprint_id:
    type: string
    default: azure_vm

  message:
    type: string
    default: Cloudify Hello World

  location:
    type: string
    description: Azure Region
    default: westeurope

  resource_group:
    default: dhl-poc-rg

  webserver_vm_size:
    default: Standard_A1_v2

  webserver_vm_image:
    default:
      publisher: Canonical
      offer: UbuntuServer
      sku: 18.04-LTS
      version: latest

  webserver_vm_os_family:
    default: linux

  webserver_vm_os_username:
    default: azureuser

  deployment_id:
    type: string

  nagios_address:
    type: string
    description: >
      Nagios address

  nagios_ssl_certificate:
    type: string
    description: >
      Nagios REST SSL certificate

  nagios_user:
    type: string
    description: >
      Nagios REST user name

  nagios_password:
    type: string
    description: >
      Nagios REST password

  f5_wan_ip:
    type: string
    description: >
      WAN IP of the F5 Load Balancer

  f5_public_ip:
    type: string
    description: >
      Public IP of the F5 Load Balancer

dsl_definitions:
  client_config: &client_config
    subscription_id: { get_secret: azure_subscription_id }
    tenant_id: { get_secret: azure_tenant_id }
    client_id: { get_secret: azure_client_id }
    client_secret: { get_secret: azure_client_secret }
    endpoint_resource: https://management.core.windows.net/
    endpoints_resource_manager: https://management.azure.com
    endpoint_verify: True
    endpoints_active_directory: https://login.microsoftonline.com

  # terminal_auth: &terminal_auth
  #   user: { get_secret: bigip_username }
  #   password: { get_secret: bigip_password }
  #   ip: { get_attribute: [mgmt_nic, ip] }
  #   promt_check:
  #     - '#'
  #     - '$'
  #   errors:
  #     - "Command fail."

node_types:
  cloudify.nodes.MonitoredServer:
    derived_from: cloudify.azure.nodes.compute.VirtualMachine
    properties:
      nagiosrest_monitoring:
        type: cloudify.datatypes.nagiosrest.Properties
    interfaces:
      cloudify.interfaces.monitoring:
        start: nagiosrest.nagiosrest_plugin.tasks.add_monitoring
        stop: nagiosrest.nagiosrest_plugin.tasks.remove_monitoring

node_templates:
  resource_group:
    type: cloudify.azure.nodes.ResourceGroup
    properties:
      client_config: *client_config
      use_external_resource: true
      name: { get_input: resource_group }
      location: { get_input: location }

  network:
    type: cloudify.azure.nodes.network.VirtualNetwork
    properties:
      client_config: *client_config
      use_external_resource: true
      api_version: "2018-04-01"
      name: { concat: [ { get_input: resource_group }, '-vnet' ] }
      location: { get_input: location }
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group

  subnet:
    type: cloudify.azure.nodes.network.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      api_version: "2018-04-01"
      name: default
      location: { get_input: location }
    relationships:
    - type: cloudify.azure.relationships.contained_in_virtual_network
      target: network

  agent_key:
    type: cloudify.keys.nodes.RSAKey
    properties:
      resource_config:
        key_name: cert_key
        openssh_format: true
      use_secret_store: true
      use_secrets_if_exist: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: keys.cloudify_ssh_key.operations.create
          inputs:
            store_private_key_material: true

  webserver_vm:
    type: cloudify.nodes.MonitoredServer
    properties:
      client_config: *client_config
      api_version: "2018-04-01"
      location: { get_input: location }
      os_family: { get_input: webserver_vm_os_family }
      storage_endpoint: core.windows.net
      resource_config:
        hardwareProfile:
          vmSize: { get_input: webserver_vm_size }
        storageProfile:
          imageReference: { get_input: webserver_vm_image }
        osProfile:
          adminUsername:  { get_input: webserver_vm_os_username }
          adminPassword: ''
          linuxConfiguration:
            ssh:
              publicKeys:
                - path: {concat:[ '/home/', { get_input: webserver_vm_os_username }, '/.ssh/authorized_keys' ]}
                  keyData: { get_attribute: [agent_key, public_key_export] }
            disablePasswordAuthentication: true
      agent_config:
        install_method: remote
        user: { get_input: webserver_vm_os_username }
        key: { get_attribute: [agent_key, private_key_export] }
      nagiosrest_monitoring:
        instance_ip_property: ip
        address: { get_input: nagios_address }
        certificate: { get_input: nagios_ssl_certificate }
        username: { get_input: nagios_user }
        password: { get_input: nagios_password }
        target_type: app_vm_heal_target_type
    interfaces:
      cloudify.interfaces.daclp:
        stop: 
          implementation: rest.cloudify_rest.tasks.execute
          inputs:
            template_file: templates/stop_vm.yaml
            params: &azure_api_params
              tenant_id: { get_secret: azure_tenant_id } 
              client_id: { get_secret: azure_client_id }
              client_secret: { get_secret: azure_client_secret }
              subscription_id: { get_secret: azure_subscription_id }
              resource_group: { get_input: resource_group }
              vm_name: { get_attribute: [SELF, name ] }
        check_stoppped: 
          implementation: rest.cloudify_rest.tasks.execute
          inputs:
            template_file: templates/check_stopped_vm.yaml
            params: *azure_api_params
        deallocate: 
          implementation: rest.cloudify_rest.tasks.execute
          inputs:
            template_file: templates/deallocate_vm.yaml
            params: *azure_api_params
        check_deallocated: 
          implementation: rest.cloudify_rest.tasks.execute
          inputs:
            template_file: templates/check_deallocated_vm.yaml
            params: *azure_api_params
        start: 
          implementation: rest.cloudify_rest.tasks.execute
          inputs:
            template_file: templates/start_vm.yaml
            params: *azure_api_params
        check_started: 
          implementation: rest.cloudify_rest.tasks.execute
          inputs:
            template_file: templates/check_started_vm.yaml
            params: *azure_api_params
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group
      - type: cloudify.azure.relationships.connected_to_nic
        target: nic
      - type: cloudify.azure.relationships.connected_to_storage_account
        target: storage_account

  storage_account:
    type: cloudify.azure.nodes.storage.StorageAccount
    properties:
      location: { get_input: location }
      resource_config:
        accountType: Standard_LRS
      client_config: *client_config
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group

  nic:
    type: cloudify.azure.nodes.network.NetworkInterfaceCard
    properties:
      location: { get_input: location }
      client_config: *client_config
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group
      - type: cloudify.azure.relationships.nic_connected_to_ip_configuration
        target: ip_config

  ip_config:
    type: cloudify.azure.nodes.network.IPConfiguration
    properties:
      location: { get_input: location }
      client_config: *client_config
      resource_config:
        privateIPAllocationMethod: Dynamic
    relationships:
      - type: cloudify.azure.relationships.ip_configuration_connected_to_subnet
        target: subnet
      - type: cloudify.azure.relationships.ip_configuration_connected_to_public_ip
        target: public_ip

  public_ip:
    type: cloudify.azure.nodes.network.PublicIPAddress
    properties:
      location: { get_input: location }
      client_config: *client_config
      resource_config:
        publicIPAllocationMethod: Static
    relationships:
      - type: cloudify.azure.relationships.contained_in_resource_group
        target: resource_group

  upgrade_vm:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        upgrade:
          implementation: scripts/do_upgrade.sh
    relationships:
      - type: cloudify.relationships.contained_in
        target: webserver_vm


  snmp_conf:
    type: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/snmp_install.sh
          inputs:
            snmp_user: { get_secret: snmp_user }
            snmp_pass: { get_secret: snmp_pass }
    relationships:
      - type: cloudify.relationships.contained_in
        target: webserver_vm
      - type: cloudify.relationships.depends_on
        target: check

  # ltm_config:
  #   type: cloudify.terminal.raw
  #   interfaces:
  #     cloudify.interfaces.lifecycle:
  #       start:
  #         inputs:
  #           terminal_auth: *terminal_auth
  #           calls:
  #             - template: scripts/ltm_config.txt
  #               params:
  #                 APP_NODE_1_IP: { get_input: f5_wan_ip }
  #                 # APP_NODE_1_PORT: { get_input: wan_port }
  #                 DESTINATION_IP: { get_input: f5_public_ip }
  #                 # DESTINATION_PORT: { get_input: lb_public_port }
  #       stop:
  #         inputs:
  #           terminal_auth: *terminal_auth
  #           calls:
  #             - template: scripts/ltm_config_stop.txt
  #   relationships:
  #     - type: cloudify.relationships.depends_on
  #       target: check

groups:
  scalable_compute:
    members:
      - resource_group
      - webserver_vm
      - storage_account
      - nic
      - ip_config
      - public_ip
      - upgrade_vm
      - run
      - check
      - snmp_conf
      - service_update

policies:
  vm_scaling_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: 1
      min_instances: 1
      max_instances: 5
    targets: [scalable_compute]

capabilities:

  resource_group:
    value: { get_input: resource_group }

  location:
    value: { get_input: location }

  webserver_vm_public_ip:
    value: { get_attribute: [ webserver_vm, public_ip ] }

  webserver_vm_private_ip:
    value: { get_attribute: [ webserver_vm, ip ] }
